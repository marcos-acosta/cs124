{"version":3,"sources":["Components/TaskItem/TaskItemOptions.js","Components/TaskItem/TaskCheckbox.js","Components/InputKeepCursor.js","Components/TaskItem/TaskTextLabel.js","Components/TaskItem/TaskExpander.js","Components/TaskItem/TaskItem.js","Components/TaskList.js","Components/CompletedSection.js","Components/AddItem.js","Components/OptionSelector.js","Components/ListSideMenu.js","Components/InfoCard.js","Components/TaskView.js","Components/TaskSupplier.js","Components/ListCard.js","Components/ListViewer.js","Components/App.js","index.js"],"names":["PRIORITIES","PRIORITY_TO_TEXT","TaskItemOptions","props","inEditMode","taskInEditModeId","id","className","onClick","onClickEditButton","aria-label","taskName","handleDeletion","map","p","index","priority","handleChangePriority","repeat","priorityToButton","ToDoCheckbox","type","checked","onChange","handleCompletion","InputKeepCursor","value","returnRef","longText","rest","useState","length","cursor","setCursor","ref","useRef","useEffect","input","current","setSelectionRange","handleChange","e","target","selectionStart","TaskTextLabel","isCompleted","shouldFadeOut","expandedTaskId","text","slice","setTaskProperty","indexOf","replace","trimNewline","onKeyUp","key","preventDefault","setTaskInEditModeId","onBlur","deselectOnEditMode","TaskExpander","isExpanded","expandedId","expandTaskCallback","color","TaskItem","setShouldFadeOut","textInput","setTimeout","deleteTask","focus","TaskList","tasks","taskItem","toggleExpandedTaskId","CompletedSection","startDisappearing","setstartDisappearing","deleteCompleted","task","join","AddItem","isNarrow","addTaskAndEdit","disabled","OptionSelector","onChangeCallback","options","i","optionValue","optionName","ListSideMenu","lists","list","setCurrentListId","currentListId","colorTheme","listName","InfoCard","error","SORTING_OPTIONS","TasksApp","setExpandedTaskId","currentList","find","addTask","setOrderingBy","loading","data","filter","TaskView","isDesktopWide","TaskSupplier","frozenTask","setFrozenTask","orderingBy","taskQuery","db","collection","doc","useCollection","taskCollection","tasksLoading","tasksError","useMediaQuery","maxWidth","minWidth","sortFunctions","a","b","frozen","toLowerCase","newestTop","oldestTop","docs","element","delete","field","update","forEach","new_id","generateUniqueID","set","created","firebase","database","ServerValue","TIMESTAMP","sort","COLOR_TO_NAME","NAME_TO_COLOR","Object","fromEntries","entries","k","ListCard","showColorPicker","setShowColorPicker","listInEditModeId","onBlurCallback","setListInEditModeId","deleteList","onChangeComplete","setListProperty","hex","colors","keys","triangle","ListViewer","addListCallback","addList","App","listQuery","listCollection","listsLoading","listsError","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9e9e129f.chunk.js","sourcesContent":["import \"./TaskItemOptions.css\"\n\nconst PRIORITIES = [1, 2, 3];\nconst PRIORITY_TO_TEXT = [\"low\", \"medium\", \"high\"];\n\nexport default function TaskItemOptions(props) {\n  const inEditMode = props.taskInEditModeId === props.id;\n\n  const priorityToButton = (priority, index) => {\n    return  <button className={`priorityButton ${props.priority === priority ? `whiteText selectedPriority` : ''}`}\n                    onClick={() => props.handleChangePriority(priority)}\n                    key={index}\n                    aria-label={`${props.priority === priority ? \"deselect\" : \"select\"} priority level for task ${props.taskName} to ${PRIORITY_TO_TEXT[priority - 1]}`}>\n                      {'!'.repeat(priority)}\n            </button>\n  }\n\n  return <>\n    <div className=\"toDoLowerHalf\" />\n    <div className=\"toDoItemOptions\">\n      <button className={`editButton toDoItemActionButton ${ inEditMode ? 'grayText' : ''}`} \n              onClick={props.onClickEditButton}\n              aria-label={`edit task name: ${props.taskName}`}>\n                edit\n      </button>\n      <button className={`deleteButton toDoItemActionButton ${inEditMode ? 'grayText' : ''}`}\n              onClick={() => props.handleDeletion()}\n              aria-label={`delete task: ${props.taskName}`}>\n                delete\n      </button>\n      <div />\n      {\n        PRIORITIES.map((p, index) => priorityToButton(p, index))\n      }\n    </div>\n  </>\n}","import \"./TaskCheckbox.css\"\n\nexport default function ToDoCheckbox(props) {\n  return (\n    <div className=\"toDoCheckbox\">\n      <input  type=\"checkbox\" \n              id={`label-${props.id}`} \n              checked={props.checked} \n              onChange={props.handleCompletion}\n              aria-label={`${props.checked ? \"uncomplete\" : \"complete\"} task \"${props.taskName}\"`}/>\n    </div>\n  )\n}","import { useEffect, useRef, useState } from 'react';\n\nexport default function InputKeepCursor(props) {\n    const { value, onChange, returnRef, longText, ...rest } = props;\n    const [cursor, setCursor] = useState(value.length);\n    const ref = useRef(null);\n\n    useEffect(() => {\n      const input = ref.current;\n      if (input) input.setSelectionRange(cursor, cursor);\n      returnRef(ref);\n    }, [returnRef, ref, cursor, value]);\n\n    const handleChange = (e) => {\n      setCursor(e.target.selectionStart);\n      onChange && onChange(e);\n    };\n\n    return longText\n      ? <textarea ref={ref} value={value} onChange={handleChange} {...rest} />\n      : <input ref={ref} value={value} onChange={handleChange} {...rest} />;\n}","import InputKeepCursor from \"../InputKeepCursor\";\nimport \"./TaskTextLabel.css\"\n\nconst TEXT_CHAR_LIMIT = 80;\n\nfunction elideText(text) {\n  return text.length > TEXT_CHAR_LIMIT ? text.slice(0, TEXT_CHAR_LIMIT) + '…' : text;\n}\n\nfunction trimNewline(text) {\n  while (text.indexOf('\\n') !== -1) {\n    text = text.replace('\\n', '');\n  }\n  return text;\n}\n\nexport default function TaskTextLabel(props) {\n  return (\n    <div className=\"toDoLabel\">\n      {\n        props.taskInEditModeId !== props.id ?\n          <label id={`label-${props.id}`} className={props.isCompleted || props.shouldFadeOut ? 'strikethrough' : ''}>\n            {\n              props.expandedTaskId === props.id\n              ? props.taskName\n              : elideText(props.taskName)\n            }\n          </label> :\n        <InputKeepCursor\n          longText={true}\n          value={props.taskName} \n          onChange={e => props.setTaskProperty(props.id, 'taskName', trimNewline(e.target.value))}\n          onKeyUp={e => {if (e.key === 'Enter') {e.preventDefault(); props.setTaskInEditModeId(null);}}} \n          returnRef={(ref) => props.returnRef(ref)}\n          onBlur={props.deselectOnEditMode}\n          aria-label=\"edit task name\" />\n      }\n    </div>\n  )\n}","import \"./TaskExpander.css\"\n\nexport default function TaskExpander(props) {\n  const isExpanded = props.expandedId === props.id;\n\n  return (\n    <button className=\"toDoOptions\" onClick={() => props.expandTaskCallback(props.id)} aria-label={`${isExpanded ? 'hide' : 'show'} task options`}>\n      <div  className={`toDoDropdown ${isExpanded ? (props.color ? `color_${props.color}_bg` : 'selected') : ''}`}>\n        <div className={`optionsArrow ${isExpanded ? 'rotated' : ''}`}>\n          ➔\n        </div>\n      </div>\n    </button>\n  );\n}","import { useEffect, useRef, useState } from 'react';\nimport TaskItemOptions from './TaskItemOptions';\nimport TaskCheckbox from './TaskCheckbox';\nimport TaskTextLabel from './TaskTextLabel';\nimport TaskExpander from './TaskExpander';\nimport './TaskItem.css';\n\nconst PRIORITY_TO_TEXT = [\"low\", \"medium\", \"high\"];\n\nexport default function TaskItem(props) {\n  const [shouldFadeOut, setShouldFadeOut] = useState(false);\n  let textInput = useRef(null);\n\n  const DISAPPEAR_DURATION_MS = 500;\n\n  useEffect(() => {\n    if (textInput.current && props.taskInEditModeId === props.id) {\n      textInput.current.focus();\n    }\n  }, [props.taskInEditModeId, props.id]);\n\n  function priorityToMarker(priority) {\n    return <div \n              className={`priorityExclamationDiv priority${priority}`}\n              aria-label={`task \"${props.taskName}\" has ${priority === 0 ? \"no\" : PRIORITY_TO_TEXT[priority - 1]} priority`}></div>;\n  }\n\n  function onClickEditButton() {\n    props.setTaskInEditModeId(props.id);\n  }\n\n  function deselectOnEditMode() {\n    props.setTaskInEditModeId(null);\n    if (!props.taskName) {\n      handleDeletion();\n    }\n  }\n\n  function handleDeletion() {\n    setShouldFadeOut(true);\n    setTimeout(() => props.deleteTask(props.id), DISAPPEAR_DURATION_MS);\n  }\n\n  function handleCompletion(e) {\n    setShouldFadeOut(true);\n    let checked = e.target.checked;\n    setTimeout(() => props.setTaskProperty(props.id, 'isCompleted', checked), DISAPPEAR_DURATION_MS);\n  }\n\n  function handleChangePriority(priority) {\n    if (props.priority === priority) {\n      props.setTaskProperty(props.id, 'priority', 0);\n    } else {\n      props.setTaskProperty(props.id, 'priority', priority);\n    }\n  }\n\n  return (\n    <>\n      <div className={`priorityMarker supportsInvisibility ${shouldFadeOut ? 'invisible' : ''}`}>\n        {priorityToMarker(props.priority)}\n      </div>\n      <div className={`toDoItem supportsInvisibility ${shouldFadeOut ? 'invisible' : ''} ${props.expandedTaskId === props.id ? 'highlighted' : ''}`}>\n          <TaskCheckbox id={props.id} checked={props.isCompleted} handleCompletion={handleCompletion} taskName={props.taskName} />\n          <TaskTextLabel \n            {...props}\n            textInput={textInput}\n            deselectOnEditMode={deselectOnEditMode}\n            shouldFadeOut={shouldFadeOut}\n            returnRef={ref => {textInput = ref}} />\n          {\n            !props.isCompleted && \n              <TaskExpander id={props.id}\n                            expandedId={props.expandedTaskId}\n                            expandTaskCallback={props.expandTaskCallback}\n                            color={props.color} />\n          }\n          {\n            props.expandedTaskId === props.id &&\n              <TaskItemOptions\n                priority={props.priority}\n                taskName={props.taskName}\n                id={props.id}\n                taskInEditModeId={props.taskInEditModeId}\n                handleChangePriority={handleChangePriority}\n                onClickEditButton={onClickEditButton}\n                handleDeletion={handleDeletion} />\n          }\n      </div>\n    </>\n  )\n}","import TaskItem from './TaskItem/TaskItem';\nimport \"./TaskList.css\";\n\nexport default function TaskList(props) {\n\n  return (\n    <div className=\"taskListDiv\">\n      {\n        props.tasks.map(taskItem => \n          <TaskItem {...taskItem} \n                key={taskItem.id} \n                expandedTaskId={props.expandedTaskId}\n                expandTaskCallback={props.toggleExpandedTaskId}\n                setTaskProperty={props.setTaskProperty}\n                deleteTask={props.deleteTask}\n                setTaskInEditModeId={props.setTaskInEditModeId}\n                taskInEditModeId={props.taskInEditModeId}\n                color={props.color} />)\n      }\n    </div>\n  )\n}","import { useState } from 'react'\nimport './CompletedSection.css'\nimport TaskList from './TaskList'\n\nexport default function CompletedSection(props) {\n  const [startDisappearing, setstartDisappearing] = useState(false);\n\n  function handleClear() {\n    setstartDisappearing(true);\n    setTimeout(() => props.deleteCompleted(), 500);\n  }\n\n  return (\n    <div className={`completedSectionContainer ${startDisappearing ? 'invisible' : ''}`}>\n      <div id=\"completedItemsHeader\">\n        <h3>\n          completed\n          <button id=\"clearCompleted\" onClick={handleClear} aria-label={`delete completed tasks. tasks to be completed: ${props.tasks.map(task => task.taskName).join()}`}>clear</button>\n        </h3>\n      </div>\n      <TaskList tasks={props.tasks} \n        setTaskProperty={props.setTaskProperty} \n        deleteTask={props.deleteTask} />\n    </div>\n  )\n}","import './AddItem.css'\n\nexport default function AddItem(props) {\n  return (\n    <button className={`addItem ${props.isNarrow ? 'addItemNarrow' : 'addItemWide'} ${props.color ? `${props.color}` : ''}`} \n            onClick={() => props.addTaskAndEdit()} disabled={props.inEditMode}\n            aria-label={props.longText}>\n      {props.isNarrow ? `+ ${props.longText}` : \"+\"}\n    </button>\n  )\n}","import \"./OptionSelector.css\";\n\nexport default function OptionSelector(props) {\n  return <select onChange={e => props.onChangeCallback(e.target.value)} className=\"optionSelector\">\n    {\n      props.options.map(([optionValue, optionName], i) => \n        <option key={i} value={optionValue}>{optionName}</option>\n      )\n    }\n  </select>\n}","import \"./ListSideMenu.css\"\n\nexport default function ListSideMenu(props) {\n  return (\n    <div className=\"mainDiv\">\n      <h3>todo 🦑</h3>\n      {props.lists.map(list => \n        <button \n          key={list.id}\n          onClick={() => props.setCurrentListId(list.id)}\n          className={`listButton ${props.currentListId === list.id ? (list.colorTheme ? `color_${list.colorTheme}_bg` : 'selected') : ''}`}\n          aria-label={`Switch to list: ${list.listName}`}>\n            <span className={props.currentListId === list.id ? 'bold' : ''}>{list.listName}</span>\n        </button>\n      )}\n    </div>\n  )\n}","import \"./InfoCard.css\"\n\nexport default function InfoCard(props) {\n  return (\n    <div className={`infoText ${props.error ? 'errorText' : ''}`}>\n      {props.error \n        ? `an unexpected error occurred: ${props.error}` \n        : 'loading...'}\n    </div>\n  )\n}","import './TaskView.css';\nimport TaskList from './TaskList';\nimport CompletedSection from './CompletedSection';\nimport AddItem from './AddItem';\nimport OptionSelector from './OptionSelector';\nimport ListSideMenu from './ListSideMenu';\nimport { useState } from 'react';\nimport InfoCard from './InfoCard';\n\nconst SORTING_OPTIONS = [['oldestTop', 'oldest'], ['newestTop', 'newest'], ['taskName', 'name'], ['priority', 'priority']];\n\nfunction TaskView(props) {\n  return props.isDesktopWide ? \n    <div className=\"pageColumnsDiv\">\n      <div className=\"listSelector\">\n        <ListSideMenu lists={props.lists} setCurrentListId={props.setCurrentListId} currentListId={props.currentListId} />\n      </div>\n      <div>\n        <TasksApp {...props} />\n      </div>\n    </div> : <TasksApp {...props} />;\n}\n\nfunction TasksApp(props) {\n  const [expandedTaskId, setExpandedTaskId] = useState(null);\n  const currentList = props.lists.find(list => list.id === props.currentListId);\n\n  const toggleExpandedTaskId = (id) => {\n    setExpandedTaskId(expandedTaskId === id ? null : id);\n  }\n\n  function addTaskAndEdit() {\n    const id = props.addTask();\n    props.setTaskInEditModeId(id);\n    setExpandedTaskId(id);\n  }\n\n  return (\n      <div>\n        <div className=\"headerRow\">\n          <button   onClick={() => props.setCurrentListId(null)} \n                    className=\"backButton\" \n                    aria-label=\"back to list menu\">\n                      ← back\n          </button>\n          <div className=\"toDoHeader\">\n            <h2 className={currentList ? `color_${currentList.colorTheme}_ul` : ''}>\n              {currentList.listName}\n            </h2>\n          </div>\n        </div>\n        <div id=\"pageContent\">\n          <div className=\"noTopMargin\">\n            <div className=\"sortByText\">sort by:</div>\n            <OptionSelector options={SORTING_OPTIONS} onChangeCallback={props.setOrderingBy} />\n          </div>\n          {\n            props.loading ? <InfoCard /> : \n            props.error ? <InfoCard error={props.error} /> :\n            <>\n              {props.data.filter(taskItem => !taskItem.isCompleted).length === 0 && \n                <button className=\"noTasksPlaceholder\" onClick={addTaskAndEdit}>\n                  add a task!\n                </button>\n              }\n              <TaskList tasks={props.data.filter(taskItem => !taskItem.isCompleted)} \n                        setTaskProperty={props.setTaskProperty} \n                        deleteTask={props.deleteTask}\n                        taskInEditModeId={props.taskInEditModeId}\n                        setTaskInEditModeId={props.setTaskInEditModeId}\n                        toggleExpandedTaskId={toggleExpandedTaskId}\n                        expandedTaskId={expandedTaskId}\n                        color={currentList.colorTheme}\n                        />\n              {\n                props.data.filter(taskItem => taskItem.isCompleted).length === 0\n                  ? ''\n                  : <CompletedSection \n                      deleteCompleted={props.deleteCompleted}\n                      tasks={props.data.filter(taskItem => taskItem.isCompleted)}\n                      setTaskProperty={props.setTaskProperty}\n                      deleteTask={props.deleteTask}/>\n              }\n            </>\n          }\n        </div>\n        <AddItem \n          inEditMode={props.taskInEditModeId !== null || props.loading ? true : false} \n          addTaskAndEdit={addTaskAndEdit}\n          isNarrow={props.isNarrow}\n          longText={\"add task\"}\n          color={`color_${currentList.colorTheme}_bg`} />\n      </div>\n  );\n}\n\nexport default TaskView;","import { useCollection } from \"react-firebase-hooks/firestore\";\nimport firebase from 'firebase/compat';\nimport { generateUniqueID } from \"web-vitals/dist/modules/lib/generateUniqueID\";\nimport TaskView from \"./TaskView\";\nimport { useEffect, useState } from \"react\";\nimport { useMediaQuery } from 'react-responsive';\n\nexport default function TaskSupplier(props) {\n  const [frozenTask, setFrozenTask] = useState(null);\n  const [taskInEditModeId, setTaskInEditModeId] = useState(null);\n  const [orderingBy, setOrderingBy] = useState(\"created\");\n  const taskQuery = props.db.collection(\"lists\").doc(props.currentListId).collection(\"tasks\");\n  const [taskCollection, tasksLoading, tasksError] = useCollection(taskQuery);\n  const isNarrow = useMediaQuery({maxWidth: 500});\n  const isDesktopWide = useMediaQuery({minWidth: 800});\n\n  const sortFunctions = {\n    priority: (a, b) => frozen(b)['priority'] - frozen(a)['priority'],\n    taskName: (a, b) => frozen(a)['taskName'].toLowerCase() < frozen(b)['taskName'].toLowerCase() ? -1 : 1,\n    newestTop: (a, b) => frozen(a)['created'] < frozen(b)['created'] ? 1 : -1,\n    oldestTop: (a, b) => frozen(a)['created'] < frozen(b)['created'] ? -1 : 1\n  }\n\n  useEffect(() => {\n    if (!tasksLoading && !tasksError) {\n      if (taskInEditModeId) {\n        setFrozenTask(\n          taskCollection.docs.map(doc => doc.data()).find(task => task.id === taskInEditModeId)\n        );\n      } else {\n        setFrozenTask(null);\n      }\n    }\n  // eslint-disable-next-line\n  }, [taskInEditModeId, tasksLoading, tasksError, (taskCollection && taskCollection.docs.length)]);\n\n  const frozen = (element) => {\n    return frozenTask && element.id === frozenTask.id ? frozenTask : element;\n  }\n\n  const setTaskProperty = (id, field, value) => {\n    const docRef = taskQuery.doc(id);\n    docRef.update({[field]: value});\n  }\n\n  const deleteTask = (id) => {\n    const docRef = taskQuery.doc(id);\n    docRef.delete();\n  }\n\n  const deleteCompleted = () => \n  taskCollection.docs.map(doc => doc.data()).filter(task => task.isCompleted).forEach(task => deleteTask(task.id));\n\n  const addTask = () => {\n    const new_id = generateUniqueID();\n    const docRef = taskQuery.doc(new_id);\n    docRef.set({\n      taskName: \"\",\n      isCompleted: false,\n      id: new_id,\n      created: firebase.database.ServerValue.TIMESTAMP,\n      priority: 0\n    });\n    return new_id;\n  }\n\n  const getSortedTasks = () => {\n    return tasksLoading\n      ? null\n      : taskCollection.docs.map(doc => doc.data()).sort(sortFunctions[orderingBy]);\n  }\n\n  return <TaskView  {...props}\n                    setTaskProperty={setTaskProperty}\n                    deleteTask={deleteTask}\n                    deleteCompleted={deleteCompleted}\n                    setOrderingBy={setOrderingBy}\n                    addTask={addTask}\n                    data={getSortedTasks()}\n                    loading={tasksLoading}\n                    error={tasksError}\n                    taskInEditModeId={taskInEditModeId}\n                    setTaskInEditModeId={setTaskInEditModeId}\n                    isNarrow={isNarrow}\n                    isDesktopWide={isDesktopWide}\n                    lists={props.lists} />\n}","import { useRef, useEffect, useState } from \"react\";\nimport InputKeepCursor from \"./InputKeepCursor\";\nimport { BlockPicker } from 'react-color';\nimport \"./ListCard.css\";\n\nconst DISAPPEAR_DURATION_MS = 500;\nconst COLOR_TO_NAME = {\n  // \"#f7f7f7\": \"default\",\n  \"#2274a5\": \"blue\",\n  \"#dc493a\": \"red\",\n  \"#662c91\": \"purple\",\n  \"#4a442d\": \"olive\",\n  \"#70ae6e\": \"green\",\n}\nconst NAME_TO_COLOR = Object.fromEntries(Object.entries(COLOR_TO_NAME).map(([k, v]) => [v, k]));\n\nexport default function ListCard(props) {\n  let textInput = useRef(null);\n  const [startDisappearing, setstartDisappearing] = useState(false);\n  const [showColorPicker, setShowColorPicker] = useState(false);\n\n  useEffect(() => {\n    if (textInput.current && props.listInEditModeId === props.id) {\n      textInput.current.focus();\n    }\n  }, [props.listInEditModeId, props.id]);\n\n  const onBlurCallback = () => {\n    props.setListInEditModeId(null)\n    if (!props.listName) {\n      handleDeletion();\n    }\n  }\n\n  const handleDeletion = () => {\n    setstartDisappearing(true);\n    setTimeout(() => props.deleteList(props.id), DISAPPEAR_DURATION_MS);\n  }\n\n  return <div className={`listCard supportsInvisibility ${startDisappearing ? 'invisible' : ''}`}>\n    <div className=\"listCardLeftPanel\">\n      <button   onClick={() => setShowColorPicker(!showColorPicker)} \n                className={`colorDropdown ${(props.colorTheme !== 'default') ? `color_${props.colorTheme}_bg` : ''}`}>\n        <div className={`dropDownArrow ${showColorPicker ? 'flipped' : ''}`} aria-label={`Select color theme for list: ${props.listName}`}>\n          ⌵\n        </div>\n      </button>\n      {\n        showColorPicker && \n        <div className=\"colorPickerDiv\">\n          <BlockPicker\n            color={NAME_TO_COLOR[props.colorTheme]}\n            onChangeComplete={color => {props.setListProperty(props.id, \"colorTheme\", COLOR_TO_NAME[color.hex.toLowerCase()]); setShowColorPicker(false)}}\n            colors={Object.keys(COLOR_TO_NAME)}\n            className=\"float\"\n            triangle=\"hide\" />\n        </div>\n      }\n    </div>\n      {\n        props.listInEditModeId === props.id\n            ? <InputKeepCursor\n                value={props.listName}\n                onChange={e => props.setListProperty(props.id, \"listName\", e.target.value)}\n                onKeyUp={e => {if (e.key === 'Enter') onBlurCallback()}}\n                onBlur={() => onBlurCallback()}\n                returnRef={(ref) => {textInput = ref}}\n                className=\"listNameInput\"\n                aria-label=\"edit list name\" />\n          : <div className=\"listName\" onClick={() => props.setCurrentListId(props.id)}>{props.listName}</div>\n      }\n      <button \n        onClick={() => props.setListInEditModeId(props.id)}\n        className=\"listActionButton linkButton editButton\"\n        aria-label={`edit list name: ${props.listName}`}>edit</button>\n      <button\n        onClick={() => handleDeletion()}\n        className=\"listActionButton linkButton deleteButton\"\n        aria-label={`delete list: ${props.listName}`}>delete</button>\n      <button \n        onClick={() => props.setCurrentListId(props.id)} \n        className=\"listActionButton openButton\"\n        aria-label={`view tasks in list: ${props.listName}`}>➔</button>\n    </div>\n}","import ListCard from \"./ListCard\";\nimport { useState } from \"react\";\nimport { useMediaQuery } from 'react-responsive';\nimport \"./ListViewer.css\";\nimport AddItem from \"./AddItem\";\nimport InfoCard from \"./InfoCard\";\n\nexport default function ListViewer(props) {\n  const [listInEditModeId, setListInEditModeId] = useState(null);\n  const isNarrow = useMediaQuery({maxWidth: 500});\n\n  const addListCallback = () => {\n    setListInEditModeId(props.addList());\n  }\n\n  return <>\n      <div className=\"header\">\n        <h4>\n          <span className=\"todo\">todo</span> 🦑\n        </h4>\n      </div>\n      <div className=\"listContainer\">\n        { props.loading ? <InfoCard /> :\n          props.error ? <InfoCard error={props.error} /> :\n            <>\n              {props.lists.length === 0 && \n                <button className=\"noListsPlaceholder\" onClick={addListCallback}>create a task list!</button>\n              }\n              {\n                props.lists.map(list => <ListCard \n                                      {...props}\n                                      {...list}\n                                      key={list.id} \n                                      listInEditModeId={listInEditModeId}\n                                      setListInEditModeId={setListInEditModeId}/>)\n              }\n            </>\n          }\n      </div>\n      <AddItem \n        isNarrow={isNarrow} \n        addTaskAndEdit={addListCallback} \n        inEditMode={listInEditModeId}\n        longText={\"add list\"} />\n    </>\n}","import TaskSupplier from \"./TaskSupplier\";\nimport { useState } from \"react\";\nimport { useCollection } from \"react-firebase-hooks/firestore\";\nimport ListViewer from \"./ListViewer\";\nimport { generateUniqueID } from \"web-vitals/dist/modules/lib/generateUniqueID\";\nimport firebase from 'firebase/compat';\nimport \"./App.css\";\n\nexport default function App(props) {\n  const listQuery = props.db.collection(\"lists\");\n  const [listCollection, listsLoading, listsError] = useCollection(listQuery);\n  const [currentListId, setCurrentListId] = useState(null);\n\n  const deleteList = (id) => {\n    const docRef = listQuery.doc(id);\n    docRef.delete();\n  }\n\n  const addList = () => {\n    const new_id = generateUniqueID();\n    const docRef = listQuery.doc(new_id);\n    docRef.set({\n      listName: \"\",\n      id: new_id,\n      created: firebase.database.ServerValue.TIMESTAMP,\n      colorTheme: \"blue\"\n    });\n    return new_id;\n  }\n\n  const setListProperty = (id, field, value) => {\n    const docRef = listQuery.doc(id);\n    docRef.update({[field]: value});\n  }\n\n  return (\n    <div className=\"minWidthContainer\">\n      {currentListId  ? <TaskSupplier   currentListId={currentListId}\n                                        lists={!listsLoading && !listsError && listCollection.docs.map(doc => doc.data())}\n                                        db={props.db}\n                                        setCurrentListId={setCurrentListId} />\n                      : <ListViewer lists={(listsLoading || listsError) ? [] : listCollection.docs.map(doc => doc.data())} \n                                    setCurrentListId={setCurrentListId} \n                                    deleteList={deleteList}\n                                    addList={addList}\n                                    setListProperty={setListProperty}\n                                    loading={listsLoading}\n                                    error={listsError}/>\n        }\n      </div>\n    )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\nimport firebase from \"firebase/compat\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAZ7Q00Z5zGKg2DOwM4qGRsPRgbRIsAoRw\",\n  authDomain: \"todosquid-adb18.firebaseapp.com\",\n  projectId: \"todosquid-adb18\",\n  storageBucket: \"todosquid-adb18.appspot.com\",\n  messagingSenderId: \"650094165810\",\n  appId: \"1:650094165810:web:ed005ab5e0d9790ae4212b\"\n};\nfirebase.initializeApp(firebaseConfig);\nconst db = firebase.firestore();\n\nfunction render() {\n  ReactDOM.render(\n    <React.StrictMode>\n      <App db={db} />\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n}\n\nrender();"],"sourceRoot":""}