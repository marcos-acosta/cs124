{"version":3,"sources":["Components/AppHeader.js","Components/TaskItem.js","Components/TaskList.js","Components/CompletedSection.js","Components/AddItem.js","App.js","Components/InMemoryApp.js","index.js"],"names":["AppHeader","id","TaskItem","props","text","useState","shouldFadeOut","setShouldFadeOut","textInput","useRef","handleDeletion","setTimeout","deleteTask","useEffect","current","focus","className","type","checked","isCompleted","onChange","e","target","setTaskProperty","handleCompletion","taskInEditModeId","expandedTaskId","taskName","length","slice","value","onKeyUp","key","setTaskInEditModeId","ref","onBlur","onClick","expandTaskCallback","TaskList","setExpandedTaskId","toggleExpandedTaskId","tasks","map","taskItem","CompletedSection","clearCompleted","AddItem","addTaskAndEdit","disabled","inEditMode","App","addTask","data","filter","InMemoryApp","initialData","setData","field","dataCopy","find","task","generateUniqueID","newTask","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.182b5856.chunk.js","sourcesContent":["import './AppHeader.css'\n\nexport default function AppHeader() {\n  return (\n    <div id=\"toDoHeader\">\n      <h2>\n        todo ðŸ¦‘\n      </h2>\n    </div>\n  )\n}","import { useEffect, useRef, useState } from 'react';\nimport './TaskItem.css';\n\nexport default function TaskItem(props) {\n  const [shouldFadeOut, setShouldFadeOut] = useState(false);\n\n  const textInput = useRef(null);\n  const TEXT_CHAR_LIMIT = 100;\n  const DISAPPEAR_DURATION_MS = 500;\n\n  useEffect(() => {\n    if (textInput.current) {\n      textInput.current.focus();\n    }\n  }, []);\n\n  function elideText(text) {\n    return text.length > TEXT_CHAR_LIMIT ? text.slice(0, TEXT_CHAR_LIMIT) + '...' : text;\n  }\n\n  function deselectOnEditMode() {\n    props.setTaskInEditModeId(null);\n    if (!props.taskName) {\n      handleDeletion();\n    }\n  }\n\n  function handleDeletion() {\n    setShouldFadeOut(true);\n    setTimeout(() => props.deleteTask(props.id), DISAPPEAR_DURATION_MS);\n  }\n\n  function handleCompletion(e) {\n    setShouldFadeOut(true);\n    let checked = e.target.checked;\n    setTimeout(() => props.setTaskProperty(props.id, 'isCompleted', checked), DISAPPEAR_DURATION_MS);\n  }\n\n  return (\n    <div className={`toDoItem ${shouldFadeOut ? 'invisible' : ''}`}>\n        <div className=\"toDoCheckbox\">\n          <input  type=\"checkbox\" \n                  id={`label-${props.id}`} \n                  checked={props.isCompleted} \n                  onChange={e => handleCompletion(e)}/>\n        </div>\n        <div className=\"toDoLabel\">\n          { props.taskInEditModeId !== props.id &&\n            <label id={`label-${props.id}`} className={props.isCompleted || shouldFadeOut ? 'strikethrough' : ''}>\n              {\n                props.expandedTaskId === props.id\n                ? props.taskName\n                : elideText(props.taskName)\n              }\n            </label>\n          }\n          <input \n            value={props.taskName} \n            onChange={e => props.setTaskProperty(props.id, 'taskName', e.target.value)}\n            onKeyUp={e => {if (e.key === 'Enter') props.setTaskInEditModeId(null)}} \n            ref={textInput}\n            className={props.taskInEditModeId !== props.id ? 'hidden' : ''}\n            onBlur={() => deselectOnEditMode()} />\n        </div>\n        {!props.isCompleted && \n          <div className=\"toDoOptions\">\n            <div  className={`toDoDropdown ${props.expandedTaskId === props.id ? 'selected' : ''}`}\n                                        onClick={() => props.expandTaskCallback(props.id)}>\n              <div className={`optionsArrow ${props.expandedTaskId === props.id ? 'rotated' : ''}`}>âž”</div>\n            </div>\n          </div>}\n      {\n        props.expandedTaskId === props.id &&\n        <>\n          <div className=\"toDoLowerHalf\" />\n          <div className=\"toDoItemOptions\">\n            <button className={`editButton toDoItemActionButton ${props.taskInEditModeId === props.id ? 'grayText' : ''}`} \n                    onClick={() => {\n                      props.setTaskInEditModeId(props.id);\n                      // For some reason, React needs a moment to get the textInput ref\n                      setTimeout(() => textInput.current.focus(), 1);\n                    }}>\n                      edit\n            </button>\n            <button className={`deleteButton toDoItemActionButton ${props.taskInEditModeId === props.id ? 'grayText' : ''}`}\n                    onClick={() => handleDeletion()}> delete </button>\n          </div>\n        </>\n      }\n    </div>\n  )\n}","import TaskItem from './TaskItem';\nimport { useState } from 'react';\n\nexport default function TaskList(props) {\n  const [expandedTaskId, setExpandedTaskId] = useState(null);\n\n  const toggleExpandedTaskId = (id) => {\n    setExpandedTaskId(expandedTaskId === id ? null : id);\n  }\n\n  return (\n    <div>\n      {\n        props.tasks.map(taskItem => \n          <TaskItem {...taskItem} \n                key={taskItem.id} \n                expandedTaskId={expandedTaskId}\n                expandTaskCallback={toggleExpandedTaskId}\n                setTaskProperty={props.setTaskProperty}\n                deleteTask={props.deleteTask}\n                setTaskInEditModeId={props.setTaskInEditModeId}\n                taskInEditModeId={props.taskInEditModeId} />)\n      }\n    </div>\n  )\n}","import { useState } from 'react'\nimport './CompletedSection.css'\nimport TaskList from './TaskList'\n\nexport default function CompletedSection(props) {\n  const [shouldFadeOut, setShouldFadeOut] = useState(false);\n\n  function handleClear() {\n    setShouldFadeOut(true);\n    setTimeout(() => props.clearCompleted(), 500);\n  }\n\n  return (\n    <div className={`completedSectionContainer ${shouldFadeOut ? 'invisible' : ''}`}>\n      <div id=\"completedItemsHeader\">\n        <h3>\n          completed\n          <button id=\"clearCompleted\" onClick={handleClear}>clear</button>\n        </h3>\n      </div>\n      <TaskList tasks={props.tasks} \n        setTaskProperty={props.setTaskProperty} \n        deleteTask={props.deleteTask} />\n    </div>\n  )\n}","import './AddItem.css'\n\nexport default function AddItem(props) {\n  return (\n    <button id=\"addItemFooter\" onClick={() => props.addTaskAndEdit()} disabled={props.inEditMode}>\n      + add item\n    </button>\n  )\n}","import './App.css';\nimport AppHeader from './Components/AppHeader';\nimport TaskList from './Components/TaskList';\nimport CompletedSection from './Components/CompletedSection';\nimport AddItem from './Components/AddItem';\nimport { useState } from 'react';\n\nfunction App(props) {\n  const [taskInEditModeId, setTaskInEditModeId] = useState(null);\n\n  function addTaskAndEdit() {\n    const id = props.addTask();\n    setTaskInEditModeId(id);\n  }\n\n  return (\n    <>\n      <AppHeader />\n      <div id=\"pageContent\">\n        {props.data.filter(taskItem => !taskItem.isCompleted).length === 0 && \n          <div id=\"noTasksPlaceholder\" onClick={addTaskAndEdit}>add a task!</div>\n        }\n        <TaskList tasks={props.data.filter(taskItem => !taskItem.isCompleted)} \n                  setTaskProperty={props.setTaskProperty} \n                  deleteTask={props.deleteTask}\n                  taskInEditModeId={taskInEditModeId}\n                  setTaskInEditModeId={setTaskInEditModeId} />\n        {\n          props.data.filter(taskItem => taskItem.isCompleted).length === 0 ? '' :\n          <>\n            <CompletedSection clearCompleted={props.clearCompleted}\n                              tasks={props.data.filter(taskItem => taskItem.isCompleted)}\n                              setTaskProperty={props.setTaskProperty}\n                              deleteTask={props.deleteTask}/>\n            {/* <TaskList tasks={props.data.filter(taskItem => taskItem.isCompleted)} \n                      setTaskProperty={props.setTaskProperty} \n                      deleteTask={props.deleteTask} /> */}\n          </>\n        }\n        \n      </div>\n      <AddItem inEditMode={taskInEditModeId ? true : false} addTaskAndEdit={addTaskAndEdit} />\n    </>\n  );\n}\n\nexport default App;","import { useState } from \"react\";\nimport { generateUniqueID } from \"web-vitals/dist/modules/lib/generateUniqueID\";\nimport App from \"../App\"\n\nexport default function InMemoryApp(props) {\n  const [data, setData] = useState(props.initialData);\n\n  function setTaskProperty(id, field, value) {\n    let dataCopy = data.slice();\n    dataCopy.find(task => task.id === id)[field] = value;\n    setData(dataCopy);\n  }\n  \n  function deleteTask(id) {\n    setData(data.filter(task => task.id !== id));\n  }\n  \n  function clearCompleted() {\n    setData(data.filter(task => !task.isCompleted));\n  }\n  \n  function addTask() {\n    const id = generateUniqueID();\n    let newTask = {\n      taskName: \"\",\n      isCompleted: false,\n      id: id\n    }\n    setData([...data, newTask]);\n    return id;\n  }\n\n  return <App   setTaskProperty={setTaskProperty}\n                deleteTask={deleteTask}\n                clearCompleted={clearCompleted}\n                addTask={addTask}\n                data={data} />\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport InMemoryApp from './Components/InMemoryApp';\nimport { generateUniqueID } from \"web-vitals/dist/modules/lib/generateUniqueID\";\n\nlet initialData = [\n  {\n    taskName: \"an incredibly wordy task; that is to say, a task with an egregious number of words. an incredibly wordy task; that is to say, a task with an egregious number of words\",\n    isCompleted: false,\n    id: generateUniqueID(),\n  },\n  {\n    taskName: \"feed rock\",\n    isCompleted: false,\n    id: generateUniqueID(),\n  },\n  {\n    taskName: \"water plant\",\n    isCompleted: true,\n    id: generateUniqueID(),\n  },\n  {\n    taskName: \"water sidewalk\",\n    isCompleted: true,\n    id: generateUniqueID(),\n  }\n];\n\nfunction render() {\n  ReactDOM.render(\n    <React.StrictMode>\n      <InMemoryApp  initialData={initialData} />\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n}\n\nrender();"],"sourceRoot":""}